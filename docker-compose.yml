name: pplbo-ecommerce
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - pplbo-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: -Xmx192m
    networks:
      - pplbo-network

  kafka-gui:
    image: quay.io/cloudhut/kowl:master-1d07695
    ports:
      - 9088:8080
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERS: kafka:9092
    networks:
      - pplbo-network
      
  # Database for all services
  db:
    image: postgres:15
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    expose:
      - "5432"
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d
      - pplbo-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_MULTIPLE_DATABASES: cart,order,payment,product,promotion
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - pplbo-network

  service-registry:
    image: service-registry
    build:
      context: ./service-registry
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=false
      - eureka.client.register-with-eureka=false
    ports:
      - "8761:8761"
    networks:
      - pplbo-network

  api-gateway:
    image: api-gateway
    restart: unless-stopped
    build:
      context: ./api-gateway
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=true
      - eureka.client.register-with-eureka=true
      - eureka.instance.preferIpAddress=true
    depends_on:
      - service-registry
    ports:
      - "8080:8080"
    networks:
      - pplbo-network

  cart-service:
    image: cart-service
    restart: unless-stopped
    build:
      context: ./cart-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=true
      - eureka.client.register-with-eureka=true
      - eureka.instance.preferIpAddress=true
      - database.url=jdbc:postgresql://db:5432/cart
      - database.username=${POSTGRES_USER}
      - database.password=${POSTGRES_PASSWORD}
      - jwt.secret=${JWT_SECRET}
    depends_on:
      - service-registry
      - db
    ports:
      - "8081:8080"
    networks:
      - pplbo-network

  order-service:
    image: order-service
    restart: unless-stopped
    build:
      context: ./order-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=true
      - eureka.client.register-with-eureka=true
      - eureka.instance.preferIpAddress=true
      - database.url=jdbc:postgresql://db:5432/order
      - database.username=${POSTGRES_USER}
      - database.password=${POSTGRES_PASSWORD}
      - jwt.secret=${JWT_SECRET}
    depends_on:
      - service-registry
      - db
    ports:
      - "8082:8080"
    networks:
      - pplbo-network

  payment-service:
    image: payment-service
    restart: unless-stopped
    build:
      context: ./payment-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=true
      - eureka.client.register-with-eureka=true
      - eureka.instance.preferIpAddress=true
      - database.url=jdbc:postgresql://db:5432/payment
      - database.username=${POSTGRES_USER}
      - database.password=${POSTGRES_PASSWORD}
      - jwt.secret=${JWT_SECRET}
    depends_on:
      - service-registry
      - db
    ports:
      - "8083:8080"
    networks:
      - pplbo-network

  product-service:
    image: product-service
    restart: unless-stopped
    build:
      context: ./product-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=true
      - eureka.client.register-with-eureka=true
      - eureka.instance.preferIpAddress=true
      - database.url=jdbc:postgresql://db:5432/product
      - database.username=${POSTGRES_USER}
      - database.password=${POSTGRES_PASSWORD}
      - jwt.secret=${JWT_SECRET}
    depends_on:
      - service-registry
      - db
    ports:
      - "8084:8080"
    networks:
      - pplbo-network

  promotion-service:
    image: promotion-service
    restart: unless-stopped
    build:
      context: ./promotion-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=true
      - eureka.client.register-with-eureka=true
      - eureka.instance.preferIpAddress=true
      - database.url=jdbc:postgresql://db:5432/promotion
      - database.username=${POSTGRES_USER}
      - database.password=${POSTGRES_PASSWORD}
      - jwt.secret=${JWT_SECRET}
    depends_on:
      - service-registry
      - db
    ports:
      - "8085:8080"
    networks:
      - pplbo-network

  example-service:
    image: example-service
    restart: unless-stopped
    build:
      context: ./example-service
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-registry:8761/eureka/
      - server.connection-timeout=60000
      - eureka.client.fetch-registry=true
      - eureka.client.register-with-eureka=true
      - eureka.instance.preferIpAddress=true
      - database.url=jdbc:postgresql://db:5432/promotion
      - database.username=${POSTGRES_USER}
      - database.password=${POSTGRES_PASSWORD}
      - jwt.secret=${JWT_SECRET}
    depends_on:
      - service-registry
      - db
      - kafka
      - zookeeper
    ports:
      - "8086:8080"
    networks:
      - pplbo-network

  # this container supposed to be off after the migration finished
  # so don't worry if you see it off after several seconds
  flyway:
    image: flyway/flyway
    entrypoint: ["bash"]
    command: >
      -c "/flyway/flyway -url=jdbc:postgresql://db:5432/cart -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -locations=filesystem:/flyway/sql/cart -connectRetries=10 migrate && 
      /flyway/flyway -url=jdbc:postgresql://db:5432/order -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -locations=filesystem:/flyway/sql/order -connectRetries=10 migrate && 
      /flyway/flyway -url=jdbc:postgresql://db:5432/payment -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -locations=filesystem:/flyway/sql/payment -connectRetries=10 migrate && 
      /flyway/flyway -url=jdbc:postgresql://db:5432/product -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -locations=filesystem:/flyway/sql/product -connectRetries=10 migrate && 
      /flyway/flyway -url=jdbc:postgresql://db:5432/promotion -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -locations=filesystem:/flyway/sql/promotion -connectRetries=10 migrate"
    volumes:
      - ./database/migrations:/flyway/sql
    depends_on:
      - db
    networks:
      - pplbo-network

networks:
  pplbo-network:

volumes:
  pplbo-volume: